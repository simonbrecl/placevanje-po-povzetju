/**
 * model za placevanje po povzetju
 */
namespace org.feri.model

concept Naslov {
  o String kraj
  o Integer postnaSt
  o String ulica
  o String hisnaSt
}
abstract participant Oseba identified by osebaID {
  o String osebaID
  o String ime
  o String priimek
}

participant Kupec extends Oseba {
  o String email
  o Naslov naslov
  o Double stanje
  --> Banka banka
  --> Posiljka[] zgodovinaPlacil optional // se avtomatsko vnese ko se posiljka obdela
}

participant Prodajalec identified by prodajalecID {
  o String prodajalecID
  o String naziv
  o Naslov naslov
  o Double stanje
  o Integer vraciloDnevi // stevilo dni od prejema, v katerih lahko kupec vrne narocilo brez posledic
}

participant Banka identified by bankaID {
  o String bankaID
  o String naziv
  o Naslov naslov
  --> Kupec[] komitenti optional 
  o Double dovoljenProcent // dovoljen procent neplacanih posiljk, s katerim banka se vedno zaupa kupcu
  o Double odobrenZnesekDo // do tega zneska banka, kljub slabi zgodovini omogoca kupcu narocila
}

participant PostnaEnota identified by postnaEnotaID {
  o String postnaEnotaID
  o String naziv
  o Naslov naslov
  o Integer hranjenjePosiljke // stevilo dni, pred vrnitvijo prodajalcu
  --> Postar[] postarji // postarji zaposleni na tej enoti
}

participant Postar extends Oseba {}

asset Izdelek identified by izdelekID {
  o String izdelekID
  o String naziv
  o Integer kolicina
  o Double cena
  --> Prodajalec prodajalec
} 

asset Narocilo identified by narociloID {
  o String narociloID
  --> Izdelek[] izdelki
  --> Kupec kupec
  o Double celotenZnesek optional // znesek se sam izracuna
  o StanjeNarocila stanjeNarocila optional // stanje narocila lahko spremeni/vnese samo banka
  o DateTime casUstvarjeno 
  o LokacijaPrevzema lokacijaPrevzema // kupec lahko prevzame posiljko na postni enoti ali se mu dostavi na dom
}

enum LokacijaPrevzema {
  o DOSTAVA_NA_DOM
  o POSTNA_ENOTA
}

enum StanjeNarocila {
  o NEODLOCENO
  o ODOBRENO
  o ZAVRNJENO
}

asset Posiljka identified by posiljkaID {
  o String posiljkaID
  --> Narocilo narocilo
  --> Postar postar optional // postar se doda pri odhodu iz postne enote
  o StanjePosiljke stanjePosiljke
  o DateTime zadnjaSprememba
  --> PostnaEnota postnaEnota
} 

enum StanjePosiljke {
  o POTEKA
  o NEPLACANO
  o PLACANO
  o ZAVRNJENO
  o NA_POSTNI_ENOTI
}

enum OdlocitevKupca {
  o PLACILO 
  o NEPLACILO 
  o ZAVRNITEV
}

// banka pred oddajo odobri nakup glede na prejsnjo zgodovino placil in visine nakupa, stanja kupca
transaction OddajaNarocila {
  --> Narocilo narocilo
  --> PostnaEnota postnaEnota
}

transaction PlaciloNaDomu {
  --> Posiljka posiljka
  --> Postar postar
  o OdlocitevKupca namenStranke // ali zeli kupec placati/neplacati, zavrniti posiljko
}
// kupec placa posiljko, vendar kasneje vrne posiljko 
transaction VraciloPosiljke {
  --> Posiljka posiljka
}
// prihod posiljke na postno enoto in nadaljnje posredovanje
transaction PrihodNaPostnoEnoto {
    --> Posiljka posiljka
    --> Postar postar
}
// v primeru, da kupec nima denarja ali ga ni doma ob dostavi, se posiljka vrne na postno enoto
transaction PrevzemNaPostniEnoti {
    --> Posiljka posiljka
    o OdlocitevKupca namenStranke 
}

transaction TestniPodatki {}

// event sporoci kupcu ali je njegovo narocilo sprejeto/zavrjeno
event NarociloEvent {
  o String sporocilo
  --> Narocilo narocilo
}
 
// event se sprozi po tem, ko se izvede placilo/neplacilo, zavrnitev posiljke
event PlaciloEvent {
  o String sporocilo
  --> Posiljka posiljka
}
// event se sprozi po tem, ko se izvede vracilo
event VraciloEvent {
  o String sporocilo
  --> Posiljka posiljka
}

// ko posiljka prispe na postno enoto
event PrihodPosiljkeEvent {
    o String sporocilo
  --> Posiljka posiljka
}
